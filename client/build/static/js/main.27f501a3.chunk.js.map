{"version":3,"sources":["Theme/Theme.js","redux/actions.js","pages/Login/Login.js","pages/Home/Post.js","pages/Home/Home.js","pages/Nav/Nav.js","pages/edit_post/EditPost.js","pages/Login/ProtectedRoute.js","pages/add/addPost.js","pages/all_posts/AllPosts.js","pages/read/ReadPost.js","pages/Login/CreateAccount.js","App.js","apollo-client/client-schema.js","redux/reducers.js","redux/store.js","index.js"],"names":["theme","createMuiTheme","palette","custom","primary","red","accent","main","light","dark","GET_IS_LOGGEDIN","type","ADD_POST_TO_STATE","payload","ADD_TITLE_TO_STATE","ADD_TAGS_TO_STATE","ADD_TAG_INPUT_TO_STATE","ADD_TAG_INPUT_SELECTED_TO_STATE","REMOVE_TAG_FROM_TAG_ARRAY","SET_USER_ID_IN_STATE","useStyles","makeStyles","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","secondary","form","width","submit","warning","color","LOGIN","gql","connect","state","isLoggedIn","loginWarning","userId","accountCreatedSuccess","dispatch","changeLoginWarningToFalse","changeLoginWarningToTrue","changeLoginStatusToTrue","getState","setUserIdInState","setAccountCreatedSuccessToFalse","classes","client","useApolloClient","useMutation","login","enqueueSnackbar","useSnackbar","useState","email","password","setState","useEffect","signIn","e","a","preventDefault","variables","input","data","console","log","loginNow","token","setTimeout","saveUserData","handleChange","target","name","value","localStorage","setItem","to","Fragment","Container","className","root","maxWidth","CssBaseline","Avatar","Typography","component","variant","Box","noValidate","TextField","required","fullWidth","error","helperText","onChange","id","label","autoComplete","autoFocus","Button","onClick","Grid","container","item","Link","href","mt","media","height","cardContent","title","fontSize","Post","postTitle","postBody","postId","Card","raised","CardActionArea","CardMedia","image","CardContent","gutterBottom","align","noWrap","require","search","marginBottom","post","break","breakpoints","down","justifyContent","submitSuccessful","allPosts","searchInputState","searchRegex","postToRead","resetSubmit","setSearchInputState","SET_SEARCH_STATE","setSearchRegex","SET_SEARCH_REGEX","setPostToRead","SET_POST_TO_READ","props","GetAllPostsQuery","regex","RegExp","length","style","placeholder","direction","query","fetchPolicy","loading","getAllPosts","map","i","doesTagsContain","tags","filter","test","postContent","key","sm","_id","nav","navLinks","text","padding","links","marginRight","typography","contrastText","textDecoration","logout","justify","useRef","inputPost","formContainer","alignContent","loadingContainer","wordCount","chip","chipContainer","flexWrap","tagInput","autocompleteInput","button","programmingLanguages","postText","currentPostWordCount","titleText","tagInputValue","tagsArray","tagInputValueSelected","addPostToLocalState","addTitleToLocalState","addTagsToLocalState","addTagInputToLocalState","addTagInputSelectedToLocalState","deleteTagFromState","getPostFromLocalState","submitSuccessfulDispatch","resetTagsState","postIdParam","useParams","getSpecificPostQuery","useQuery","getSpecificPost","t","globalRef","current","Array","fill","_","createRef","amendPostMutationQuery","amendPostMutation","user","alert","CircularProgress","multiline","rows","rowsMax","Autocomplete","event","newValue","inputValue","onInputChange","newInputValue","options","getOptionLabel","option","renderInput","params","Chip","index","ref","onDelete","strToRemove","children","textContent","handleDelete","Component","rest","useLayoutEffect","render","pathname","resetPostState","submitPostMutation","info","newPost","table","minWidth","getAllPostsQuery","deletePostQuery","onCompleted","pollInterval","okRef","cancelRef","rowRef","posts","React","open","setOpen","postIdentifiedToBeDeleted","setPostIdentifier","redirect","setRedirect","postToEdit","setPostToEdit","deletePostMutation","deletePost","handleCloseOnOk","handleCloseOnCancel","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","TableBody","row","postDate","likes","handleClickOpen","handleEditPostClick","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","paragraph","textAlign","headerImage","CREATE_USER","createAccountWarning","changeCreateAccountWarningToTrue","changeCreateAccountWarningToFalse","setAccountCreatedSuccess","createUser","userAlreadyExists","setUserAlreadyExists","checkEmailValid","checkPasswordValid","alpha","createUserAccount","emailValid","passwordValid","ThemeProvider","Nav","Home","exact","path","addPost","AllPosts","EditPost","ReadPost","typeDefs","initialState","rootReducer","action","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","HttpLink","inMemoryCache","InMemoryCache","resolvers","Mutation","parent","args","cache","writeData","bool","isLoggedInMutation","readQuery","res","ApolloApp","undefined","setClient","link","uri","ApolloClient","basename","maxSnack","ReactDOM","document","getElementById","init"],"mappings":"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","file":"static/js/main.27f501a3.chunk.js","sourcesContent":["import {createMuiTheme} from '@material-ui/core/styles'\r\nimport {blue} from '@material-ui/core/colors/'\r\nimport {lime} from '@material-ui/core/colors/'\r\nimport {red} from '@material-ui/core/colors/'\r\n\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        custom: {\r\n            primary: red[400],\r\n            accent: '#9E4E2B'\r\n        },\r\n        primary: {\r\n            main: '#2A9D8F',\r\n            light: '#289FB5',\r\n            dark: '#689F38'\r\n        }\r\n    }\r\n})\r\n\r\nexport default theme;\r\n\r\n","\r\n\r\nexport const GET_IS_LOGGEDIN = {type: 'GET_IS_LOGGEDIN'}\r\n\r\n\r\n//Post Actions\r\nexport const ADD_POST_TO_STATE = function (payload) {\r\n    return {type: 'ADD_POST_TO_STATE', payload}\r\n}\r\n\r\nexport const ADD_TITLE_TO_STATE = function (payload) {\r\n    return {type: 'ADD_TITLE_TO_STATE', payload}\r\n}\r\n\r\nexport const ADD_TAGS_TO_STATE = function (payload) {\r\n\r\n    return {type: 'ADD_TAGS_TO_STATE', payload}\r\n}\r\n\r\nexport const ADD_TAG_INPUT_TO_STATE = function (payload) {\r\n    return {type: 'ADD_TAG_INPUT_TO_STATE', payload}\r\n}\r\n\r\nexport const ADD_TAG_INPUT_SELECTED_TO_STATE = function (payload) {\r\n    return {type: 'ADD_TAG_INPUT_SELECTED_TO_STATE', payload}\r\n}\r\n\r\nexport const REMOVE_TAG_FROM_TAG_ARRAY = function(payload) {\r\n    return {type: 'REMOVE_TAG_FROM_TAG_ARRAY', payload}\r\n}\r\n\r\nexport const GET_POST_FROM_LOCAL_STATE = function(){\r\n    return {type:'GET_POST_FROM_LOCAL_STATE'}\r\n}\r\n\r\nexport const SUBMIT_SUCCESSFUL = function() {\r\n    return {type: 'SUBMIT_SUCCESSFUL'}\r\n}\r\n\r\nexport const SET_POSTS = function(payload) {\r\n    return {type: 'SET_POSTS', payload}\r\n}\r\n\r\nexport const SET_SEARCH_STATE = function(payload) {\r\n    return {type:'SET_SEARCH_STATE', payload }\r\n}\r\n\r\nexport const SET_SEARCH_REGEX = function(payload) {\r\n    return {type:'SET_SEARCH_REGEX', payload}\r\n}\r\n\r\nexport const SET_USER_ID_IN_STATE = function(payload) {\r\n    return {type: 'SET_USER_ID_IN_STATE' , payload}\r\n}\r\n\r\nexport const SET_POST_TO_READ = function(payload) {\r\n    return {type: 'SET_POST_TO_READ', payload}\r\n}","/* eslint-disable */\r\nimport React, { useState, useContext, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport gql from \"graphql-tag\";\r\nimport { useApolloClient, useMutation, useQuery } from \"@apollo/react-hooks\";\r\nimport { Redirect, BrowserRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { SET_USER_ID_IN_STATE } from \"../../redux/actions\";\r\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  warning: {\r\n    color: \"red\",\r\n  },\r\n}));\r\n\r\n\r\n\r\nconst LOGIN = gql`\r\n  mutation login($input: credentials) {\r\n    loginNow(input: $input) {\r\n      token\r\n      userId\r\n    }\r\n  }\r\n`;\r\n\r\nconst Login = ({\r\n  isLoggedIn,\r\n  loginWarning,\r\n  changeLoginWarningToFalse,\r\n  changeLoginWarningToTrue,\r\n  changeLoginStatusToTrue,\r\n  setUserIdInState,\r\n  accountCreatedSuccess,\r\n  setAccountCreatedSuccessToFalse,\r\n}) => {\r\n  const classes = useStyles();\r\n  const client = useApolloClient();\r\n\r\n  const [login] = useMutation(LOGIN);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const [state, setState] = useState({ email: \"\", password: \"\" });\r\n\r\n  const msgTimer = () => {\r\n    setTimeout(function () {\r\n      changeLoginWarningToFalse();\r\n    }, 4000);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setAccountCreatedSuccessToFalse()\r\n  },[])\r\n\r\n  const signIn = async (e, client) => {\r\n    e.preventDefault();\r\n\r\n    const { data } = await login({\r\n      variables: { input: { email: state.email, password: state.password } },\r\n    });\r\n    console.log(data);\r\n    if (data.loginNow.token === null) {\r\n      await changeLoginWarningToTrue();\r\n      msgTimer();\r\n    }\r\n    if (data.loginNow.token !== null) {\r\n      await setUserIdInState(data.loginNow.userId);\r\n      await changeLoginStatusToTrue();\r\n\r\n      saveUserData(data.loginNow.token);\r\n    }\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setState({ ...state, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const saveUserData = (token) => {\r\n    localStorage.setItem(\"AUTH_TOKEN\", token);\r\n  };\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container className={classes.root} maxWidth={\"xs\"}>\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component={\"h1\"} variant={\"h5\"}>\r\n            Sign In\r\n          </Typography>\r\n\r\n          {accountCreatedSuccess &&\r\n            enqueueSnackbar(\"Account Created!\", { variant: \"success\" })\r\n          }\r\n\r\n          {loginWarning && (\r\n            <Box className={classes.warning}>\r\n              {\r\n                \"We do not recognise that user or password, please recheck your credentials\"\r\n              }\r\n            </Box>\r\n          )}\r\n\r\n          <form className={classes.form} noValidate>\r\n            <TextField\r\n              variant={\"outlined\"}\r\n              margin={\"normal\"}\r\n              required\r\n              fullWidth\r\n              error={loginWarning}\r\n              helperText={\r\n                loginWarning\r\n                  ? \"Please verify your email was entered correctly.\"\r\n                  : \"\"\r\n              }\r\n              onChange={handleChange}\r\n              value={state.email}\r\n              id={\"email\"}\r\n              label={\"email address\"}\r\n              name={\"email\"}\r\n              autoComplete={\"email\"}\r\n              autoFocus\r\n            />\r\n\r\n            <TextField\r\n              variant={\"outlined\"}\r\n              margin={\"normal\"}\r\n              required\r\n              fullWidth\r\n              error={loginWarning}\r\n              helperText={\r\n                loginWarning ? \"Please verify your password is correct.\" : \"\"\r\n              }\r\n              onChange={handleChange}\r\n              value={state.password}\r\n              id={\"password\"}\r\n              label={\"password\"}\r\n              name={\"password\"}\r\n              type={\"password\"}\r\n              autoComplete={\"current-password\"}\r\n            />\r\n\r\n            <Button\r\n              type={\"submit\"}\r\n              fullWidth\r\n              variant={\"contained\"}\r\n              color={\"primary\"}\r\n              onClick={(e) => signIn(e, client)}\r\n              className={classes.submit}\r\n            >\r\n              Sign In\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item>\r\n                <Link href={\"/create_account\"} variant={\"body2\"}>\r\n                  {\"Dont have an account? Sign Up\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n        <Box mt={8}>\r\n\r\n        </Box>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLoggedIn: state.isLoggedIn,\r\n  loginWarning: state.loginWarning,\r\n  userId: state.userId,\r\n  accountCreatedSuccess: state.accountCreatedSuccess,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  changeLoginWarningToFalse: () =>\r\n    dispatch({ type: \"CHANGE_LOGIN_WARNING_FALSE\" }),\r\n  changeLoginWarningToTrue: () =>\r\n    dispatch({ type: \"CHANGE_LOGIN_WARNING_TRUE\" }),\r\n  changeLoginStatusToTrue: () => dispatch({ type: \"CHANGE_LOGIN_STATUS_TRUE\" }),\r\n  getState: () => dispatch({ type: \"DEFAULT\" }),\r\n  setUserIdInState: (payload) => dispatch(SET_USER_ID_IN_STATE(payload)),\r\n  setAccountCreatedSuccessToFalse: () =>\r\n    dispatch({ type: \"ACCOUNT_CREATED_SUCCESS_TO_FALSE\" }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","import React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n  cardContent: {\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    fontSize: \"1rem\",\r\n    width: \"100%\",\r\n    display: \"block\",\r\n  },\r\n}));\r\n\r\nconst Post = ({ postTitle, postBody, postId }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card className={classes.root} raised>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image={\"https://picsum.photos/345/140\"}\r\n          title={\"Test Post\"}\r\n        />\r\n        <CardContent className={classes.cardContent}>\r\n          <Typography\r\n            gutterBottom\r\n            variant={\"h6\"}\r\n            align={\"left\"}\r\n            component={\"p\"}\r\n            className={classes.title}\r\n          >\r\n            {postTitle}\r\n          </Typography>\r\n          <Typography\r\n            noWrap\r\n            variant={\"body2\"}\r\n            color={\"textSecondary\"}\r\n            component={\"p\"}\r\n            align={\"center\"}\r\n          >\r\n            {postBody}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","/* eslint-disable */\r\nimport React from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport { connect } from \"react-redux\";\r\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\r\nimport { Query } from \"@apollo/react-components\";\r\nimport { useApolloClient } from \"@apollo/react-hooks\";\r\nimport Post from \"./Post\";\r\nimport gql from \"graphql-tag\";\r\n\r\nimport {\r\n  SET_POST_TO_READ,\r\n  SET_SEARCH_REGEX,\r\n  SET_SEARCH_STATE,\r\n} from \"../../redux/actions\";\r\n\r\n\r\nimport { Redirect } from \"react-router-dom\";\r\nconst { useEffect } = require(\"react\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  search: {\r\n    marginBottom: \"150px\",\r\n    width: \"100%\",\r\n  },\r\n  post: {\r\n    height: \"400px\",\r\n    marginTop: \"-100px\",\r\n  },\r\n  break: {\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      justifyContent: \"center\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Home = ({\r\n  props,\r\n  resetSubmit,\r\n  submitSuccessful,\r\n  searchInputState,\r\n  setSearchInputState,\r\n  searchRegex,\r\n  setSearchRegex,\r\n  setPostToRead,\r\n  postToRead,\r\n}) => {\r\n  const client = useApolloClient();\r\n\r\n  const GetAllPostsQuery = gql`\r\n    query {\r\n      getAllPosts {\r\n        postTitle\r\n        postContent\r\n        views\r\n        tags\r\n        _id\r\n      }\r\n    }\r\n  `;\r\n  useEffect(() => {\r\n    resetSubmit();\r\n    return function () {\r\n      setPostToRead(\"\");\r\n    };\r\n  }, []);\r\n\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  let regex = new RegExp(searchRegex, \"i\");\r\n\r\n  const handleSearchInputChange = (e) => {\r\n    setSearchInputState(e.target.value);\r\n    setSearchRegex(e.target.value);\r\n  };\r\n\r\n  function postClickHandler(_id) {\r\n    setPostToRead(_id);\r\n  }\r\n\r\n  if (postToRead.length > 0) {\r\n    return <Redirect to={`/post/${postToRead}`} />;\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth={\"md\"}>\r\n      {submitSuccessful &&\r\n        enqueueSnackbar(\"Post Added!\", { variant: \"success\" })}\r\n\r\n      <Box mt={10}>\r\n        <Grid container className={`${classes.break} ${classes.search}`}>\r\n          <Grid item>\r\n            <Search />\r\n          </Grid>\r\n          <Grid item style={{ display: \"block\", width: \"80%\" }}>\r\n            <TextField\r\n              placeholder={\"Search by content or tag...\"}\r\n              fullWidth\r\n              value={searchInputState}\r\n              onChange={handleSearchInputChange}\r\n            ></TextField>\r\n          </Grid>\r\n        </Grid>\r\n      </Box>\r\n\r\n      <Box mt={4}>\r\n        <Grid container spacing={1} direction={\"row\"} className={classes.break}>\r\n          <Query query={GetAllPostsQuery} fetchPolicy={\"no-cache\"}>\r\n            {({ data, error, loading }) => {\r\n              if (loading) return \"loading....\";\r\n              if (error) return \"something went wrong....\";\r\n\r\n              return (\r\n                <>\r\n                  {data.getAllPosts.map((post, i) => {\r\n                    let doesTagsContain = post.tags.filter((item) => {\r\n                      return regex.test(item);\r\n                    });\r\n\r\n                    let a =\r\n                      regex.test(post.postTitle) ||\r\n                      regex.test(post.postContent) ||\r\n                      doesTagsContain.length > 0 ? (\r\n                        <Grid\r\n                          key={i}\r\n                          item\r\n                          className={classes.post}\r\n                          sm={4}\r\n                          onClick={() => postClickHandler(post._id)}\r\n                        >\r\n                          <Post\r\n                            postTitle={post.postTitle}\r\n                            postBody={post.postContent}\r\n                          />\r\n                        </Grid>\r\n                      ) : null;\r\n                    return a;\r\n                  })}\r\n                </>\r\n              );\r\n            }}\r\n          </Query>\r\n        </Grid>\r\n      </Box>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst stateToProps = (state) => ({\r\n  submitSuccessful: state.submitSuccessful,\r\n  allPosts: state.allPosts,\r\n  searchInputState: state.searchInputState,\r\n  searchRegex: state.searchRegex,\r\n  postToRead: state.postToRead,\r\n});\r\n\r\nconst dispatchToProps = (dispatch) => ({\r\n  resetSubmit: () => dispatch({ type: \"RESET_SUBMIT\" }),\r\n  setSearchInputState: (payload) => dispatch(SET_SEARCH_STATE(payload)),\r\n  setSearchRegex: (payload) => dispatch(SET_SEARCH_REGEX(payload)),\r\n  setPostToRead: (payload) => dispatch(SET_POST_TO_READ(payload)),\r\n});\r\n\r\nexport default connect(stateToProps, dispatchToProps)(Home);\r\n","import React from \"react\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  nav: {\r\n    backgroundColor: theme.palette.primary.light,\r\n    height: \"100px\",\r\n    width: \"100vw\",\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  navLinks: {\r\n    color: theme.palette.text.primary,\r\n    padding: 0,\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    margin: 0,\r\n  },\r\n  links: {\r\n    marginRight: \"40px\",\r\n    fontSize: theme.typography.fontSize,\r\n    color: theme.palette.primary.contrastText,\r\n    textDecoration: \"none\",\r\n    \"&:hover\": {\r\n      color: theme.palette.text.secondary,\r\n      textDecoration: \"none\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Navbar = ({ props, isLoggedIn, logout }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box component={\"nav\"} className={classes.nav}>\r\n      <CssBaseline />\r\n\r\n      <Grid\r\n        container\r\n        justify={\"flex-end\"}\r\n        alignItems={\"center\"}\r\n        spacing={3}\r\n        className={classes.navLinks}\r\n      >\r\n        <Grid item>\r\n          <Link className={classes.links} to={\"/home\"}>\r\n            Home\r\n          </Link>\r\n        </Grid>\r\n\r\n        {isLoggedIn && (\r\n          <Grid item>\r\n            <Link className={classes.links} to={\"/add_post\"}>\r\n              Add Post\r\n            </Link>\r\n          </Grid>\r\n        )}\r\n\r\n        {isLoggedIn && (\r\n          <Grid item>\r\n            <Link className={classes.links} to={\"/all_posts\"}>\r\n              Edit Posts\r\n            </Link>\r\n          </Grid>\r\n        )}\r\n\r\n        {isLoggedIn && (\r\n            <Grid item>\r\n              <Link className={classes.links} onClick={()=>logout()}  >\r\n                Logout\r\n              </Link>\r\n            </Grid>\r\n        )}\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLoggedIn: state.isLoggedIn,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  logout: () => dispatch({type:'LOGOUT'})\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\n","import React, { createRef } from \"react\";\r\nimport { ADD_POST_TO_STATE } from \"../../redux/actions\";\r\nimport { ADD_TITLE_TO_STATE } from \"../../redux/actions\";\r\nimport { ADD_TAGS_TO_STATE } from \"../../redux/actions\";\r\nimport { ADD_TAG_INPUT_TO_STATE } from \"../../redux/actions\";\r\nimport { ADD_TAG_INPUT_SELECTED_TO_STATE } from \"../../redux/actions\";\r\nimport { REMOVE_TAG_FROM_TAG_ARRAY } from \"../../redux/actions\";\r\nimport { GET_POST_FROM_LOCAL_STATE } from \"../../redux/actions\";\r\nimport { SUBMIT_SUCCESSFUL } from \"../../redux/actions\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport CssBaseLine from \"@material-ui/core/CssBaseline\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport { Redirect, useParams } from \"react-router-dom\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst {useEffect} = require(\"react\");\r\n\r\nconst { useRef } = require(\"react\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    inputPost: {\r\n        width: \"80%\",\r\n        marginTop: \"0\",\r\n    },\r\n    formContainer: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n        marginTop: \"0.5rem\",\r\n        alignContent: \"center\",\r\n    },\r\n    loadingContainer: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignContent: \"center\"\r\n    },\r\n    wordCount: {\r\n        marginTop: \"10px\",\r\n        color: \"red\",\r\n    },\r\n    title: {\r\n        marginTop: \"1rem\",\r\n    },\r\n    chip: {\r\n        width: \"\",\r\n    },\r\n    chipContainer: {\r\n        display: \"flex\",\r\n        justifyContent: \"flex-start\",\r\n        flexWrap: \"wrap\",\r\n        \"& > *\": {\r\n            margin: theme.spacing(0.5),\r\n        },\r\n        marginTop: \"2rem\",\r\n        width: \"30%\",\r\n    },\r\n    tagInput: {\r\n        width: \"20%\",\r\n    },\r\n    autocompleteInput: {},\r\n    button: {\r\n        marginTop: \"20px\",\r\n        width: \"15%\",\r\n    },\r\n}));\r\n\r\nconst AddPost = ({\r\n                     props,\r\n                     currentPostWordCount,\r\n                     postText,\r\n                     addTagsToLocalState,\r\n                     addPostToLocalState,\r\n                     titleText,\r\n                     addTitleToLocalState,\r\n                     tagInputValue,\r\n                     addTagInputToLocalState,\r\n                     tagsArray,\r\n                     tagInputValueSelected,\r\n                     addTagInputSelectedToLocalState,\r\n                     deleteTagFromState,\r\n                     submitSuccessful,\r\n                     submitSuccessfulDispatch,\r\n                     userId,\r\n                     resetTagsState\r\n                 }) => {\r\n\r\n\r\n    const classes = useStyles();\r\n    let postIdParam = useParams()\r\n\r\n    const getSpecificPostQuery = gql`\r\n        query getSpecific ($postId: String){\r\n            getSpecificPost(postId: $postId){\r\n\r\n                postTitle\r\n                postContent\r\n                tags\r\n            }\r\n        }\r\n    `\r\n\r\n    const {data, loading, error} = useQuery(getSpecificPostQuery, {fetchPolicy:\"no-cache\",variables:{postId:postIdParam.id}})\r\n\r\n    useEffect(()=> {\r\n\r\n        if(data) {\r\n\r\n\r\n\r\n            resetTagsState()\r\n            let {tags} = data.getSpecificPost\r\n            if (tags.length == 0) {\r\n            } else {\r\n                tags.map( (t) => {\r\n                    addTagsToLocalState(t)\r\n                })\r\n            }\r\n\r\n\r\n            addTitleToLocalState(data.getSpecificPost.postTitle)\r\n            addPostToLocalState(data.getSpecificPost.postContent)\r\n\r\n\r\n        }\r\n\r\n    },[data])\r\n\r\n\r\n    let refContainer = {};\r\n    let globalRef = useRef([]);\r\n\r\n    if (globalRef.current.length !== tagsArray.length) {\r\n        globalRef.current = Array(tagsArray.length)\r\n            .fill()\r\n            .map((_, i) => globalRef.current[i] || createRef());\r\n\r\n    }\r\n\r\n    const amendPostMutationQuery = gql`\r\n        mutation amend ($postId: String , $post: newPost){\r\n            amendPost(postId: $postId, post: $post){\r\n                postTitle\r\n            }\r\n        }\r\n    `\r\n\r\n    const [amendPostMutation, post] = useMutation(amendPostMutationQuery);\r\n\r\n    const chipRef = useRef(null);\r\n\r\n    let handleChange = (e) => {\r\n        e.preventDefault();\r\n\r\n        let value = e.target.value;\r\n\r\n        switch (e.target.id) {\r\n            case \"post-body\":\r\n                addPostToLocalState(value);\r\n                return;\r\n            case \"post-title\":\r\n                addTitleToLocalState(value);\r\n                return;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    let handleTagChange = (event, newValue) => {\r\n        addTagInputToLocalState(newValue.title);\r\n        addTagsToLocalState(newValue.title);\r\n    };\r\n\r\n    let handleTagSelectedChange = (event, newInputValue) => {\r\n        addTagInputSelectedToLocalState(newInputValue);\r\n    };\r\n\r\n    function handleDelete(e, index) {\r\n        let strToRemove = globalRef.current[index].current.children[0].textContent;\r\n        deleteTagFromState(strToRemove);\r\n    }\r\n\r\n    async function submitPost(e) {\r\n        e.preventDefault();\r\n        const post = {\r\n            postContent: postText,\r\n            postTitle: titleText,\r\n            tags: tagsArray,\r\n            user: userId\r\n\r\n        };\r\n\r\n\r\n        try {\r\n            await amendPostMutation({ variables: {postId: postIdParam.id ,post} });\r\n            submitSuccessfulDispatch();\r\n        } catch (e) {\r\n            alert(\"There was an error\");\r\n        }\r\n    }\r\n\r\n    if (submitSuccessful) {\r\n        addTitleToLocalState('')\r\n        addPostToLocalState('')\r\n        addTagsToLocalState('')\r\n        return <Redirect to={\"/\"} />;\r\n    }\r\n\r\n    if (loading){\r\n        return (\r\n            <div className={classes.loadingContainer}>\r\n                <CircularProgress/>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <Container>\r\n            <CssBaseLine />\r\n            <form className={classes.formContainer}>\r\n                <h2 className={classes.title}>Post Title</h2>\r\n                <TextField\r\n                    className={classes.inputPost}\r\n                    onChange={handleChange}\r\n                    value={titleText}\r\n                    id={\"post-title\"}\r\n                />\r\n                <h2 className={classes.title}>Content</h2>\r\n                <TextField\r\n                    className={classes.inputPost}\r\n                    id={\"post-body\"}\r\n                    label={\"Add Post Here....\"}\r\n                    multiline={true}\r\n                    rows={10}\r\n                    rowsMax={30}\r\n                    onChange={handleChange}\r\n                    value={postText}\r\n                />\r\n                <div\r\n                    className={classes.wordCount}\r\n                >{`${currentPostWordCount} Characters`}</div>\r\n                <h3 className={classes.title}>Tags</h3>\r\n                <Autocomplete\r\n                    id=\"tags\"\r\n                    value={tagInputValue}\r\n                    onChange={handleTagChange}\r\n                    inputValue={tagInputValueSelected}\r\n                    onInputChange={handleTagSelectedChange}\r\n                    options={programmingLanguages}\r\n                    className={\"tags\"}\r\n                    getOptionLabel={(option) => option.title}\r\n                    style={{ width: 300 }}\r\n                    renderInput={(params) => (\r\n                        <TextField {...params} label=\"Tags\" variant=\"outlined\" />\r\n                    )}\r\n                />\r\n                <div className={classes.chipContainer}>\r\n                    <>\r\n                        {tagsArray.length > 0 && tagsArray.map((item, i) => {\r\n                            return (\r\n                                <Chip\r\n                                    className={classes.chip}\r\n                                    index={i}\r\n                                    label={item}\r\n                                    color={\"secondary\"}\r\n                                    ref={globalRef.current[i]}\r\n                                    onDelete={(e) => handleDelete(e, i)}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </>\r\n                </div>\r\n                <Button\r\n                    className={classes.button}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={submitPost}\r\n                >\r\n                    Submit Amends\r\n                </Button>\r\n            </form>\r\n        </Container>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    postText: state.postText,\r\n    currentPostWordCount: state.currentPostWordCount,\r\n    titleText: state.titleText,\r\n    tagInputValue: state.tagInputValue,\r\n    tagsArray: state.tagsArray,\r\n    tagInputValueSelected: state.tagInputValueSelected,\r\n    submitSuccessful: state.submitSuccessful,\r\n    userId: state.userId\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    addPostToLocalState: (payload) => dispatch(ADD_POST_TO_STATE(payload)),\r\n    addTitleToLocalState: (payload) => dispatch(ADD_TITLE_TO_STATE(payload)),\r\n    addTagsToLocalState: (payload) => dispatch(ADD_TAGS_TO_STATE(payload)),\r\n    addTagInputToLocalState: (payload) =>\r\n        dispatch(ADD_TAG_INPUT_TO_STATE(payload)),\r\n    addTagInputSelectedToLocalState: (payload) =>\r\n        dispatch(ADD_TAG_INPUT_SELECTED_TO_STATE(payload)),\r\n    deleteTagFromState: (payload) => dispatch(REMOVE_TAG_FROM_TAG_ARRAY(payload)),\r\n    getPostFromLocalState: () => dispatch(GET_POST_FROM_LOCAL_STATE()),\r\n    submitSuccessfulDispatch: () => dispatch(SUBMIT_SUCCESSFUL()),\r\n    resetTagsState: () => dispatch({type:'RESET_TAGS_STATE'})\r\n});\r\n\r\nconst programmingLanguages = [\r\n    { title: \"Python\" },\r\n    { title: \"Javascript\" },\r\n    { title: \"Java\" },\r\n    { title: \"HTML\" },\r\n    { title: \"CSS\" },\r\n    { title: \"C++\" },\r\n];\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddPost);\r\n","import React, {useLayoutEffect} from 'react';\r\nimport {BrowserRouter, Route, Link, Redirect, Switch} from 'react-router-dom'\r\nimport {connect} from 'react-redux'\r\n\r\n\r\nconst {useEffect} = require(\"react\");\r\n\r\nconst ProtectedRoute = ({Component,isLoggedIn, ...rest}) => {\r\n\r\n\r\n    useLayoutEffect(()=>{\r\n    },[])\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Route {...rest} render={(props) => {\r\n\r\n            if (isLoggedIn) {\r\n                return <Component/>\r\n\r\n\r\n            } else {\r\n                return <Redirect to={{pathname: '/login',\r\n\r\n                }}/>\r\n            }\r\n        }}\r\n        />\r\n\r\n\r\n            ) }\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isLoggedIn : state.isLoggedIn\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(ProtectedRoute);","import React, { createRef, useEffect } from \"react\";\r\nimport { ADD_POST_TO_STATE } from \"../../redux/actions\";\r\nimport { ADD_TITLE_TO_STATE } from \"../../redux/actions\";\r\nimport { ADD_TAGS_TO_STATE } from \"../../redux/actions\";\r\nimport { ADD_TAG_INPUT_TO_STATE } from \"../../redux/actions\";\r\nimport { ADD_TAG_INPUT_SELECTED_TO_STATE } from \"../../redux/actions\";\r\nimport { REMOVE_TAG_FROM_TAG_ARRAY } from \"../../redux/actions\";\r\nimport { GET_POST_FROM_LOCAL_STATE } from \"../../redux/actions\";\r\nimport { SUBMIT_SUCCESSFUL } from \"../../redux/actions\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { connect } from \"react-redux\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport CssBaseLine from \"@material-ui/core/CssBaseline\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport gql from \"graphql-tag\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst { useRef } = require(\"react\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  inputPost: {\r\n    width: \"80%\",\r\n    marginTop: \"0\",\r\n  },\r\n  formContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    marginTop: \"0.5rem\",\r\n    alignContent: \"center\",\r\n  },\r\n  wordCount: {\r\n    marginTop: \"10px\",\r\n    color: \"red\",\r\n  },\r\n  title: {\r\n    marginTop: \"1rem\",\r\n  },\r\n  chip: {\r\n    width: \"\",\r\n  },\r\n  chipContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-start\",\r\n    flexWrap: \"wrap\",\r\n    \"& > *\": {\r\n      margin: theme.spacing(0.5),\r\n    },\r\n    marginTop: \"2rem\",\r\n    width: \"30%\",\r\n  },\r\n  tagInput: {\r\n    width: \"20%\",\r\n  },\r\n  autocompleteInput: {},\r\n  button: {\r\n    marginTop: \"20px\",\r\n    width: \"15%\",\r\n  },\r\n}));\r\n\r\nconst AddPost = ({\r\n  props,\r\n  currentPostWordCount,\r\n  postText,\r\n  addTagsToLocalState,\r\n  addPostToLocalState,\r\n  titleText,\r\n  addTitleToLocalState,\r\n  tagInputValue,\r\n  addTagInputToLocalState,\r\n  tagsArray,\r\n  tagInputValueSelected,\r\n  addTagInputSelectedToLocalState,\r\n  deleteTagFromState,\r\n  getPostFromLocalState,\r\n  submitSuccessful,\r\n  submitSuccessfulDispatch,\r\n  userId,\r\n  resetPostState,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  let refContainer = {};\r\n  let globalRef = useRef([]);\r\n\r\n  if (globalRef.current.length !== tagsArray.length) {\r\n    globalRef.current = Array(tagsArray.length)\r\n      .fill()\r\n      .map((_, i) => globalRef.current[i] || createRef());\r\n  }\r\n\r\n  const [submitPostMutation, post] = useMutation(gql`\r\n    mutation addPost($newPost: newPost) {\r\n      addPost(post: $newPost) {\r\n        postTitle\r\n      }\r\n    }\r\n  `);\r\n\r\n  useEffect(() => {\r\n    resetPostState();\r\n  }, []);\r\n\r\n  const chipRef = useRef(null);\r\n\r\n  let handleChange = (e) => {\r\n    e.preventDefault();\r\n\r\n    let value = e.target.value;\r\n\r\n    switch (e.target.id) {\r\n      case \"post-body\":\r\n        addPostToLocalState(value);\r\n        return;\r\n      case \"post-title\":\r\n        addTitleToLocalState(value);\r\n        return;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  let handleTagChange = (event, newValue) => {\r\n    addTagInputToLocalState(newValue.title);\r\n    addTagsToLocalState(newValue.title);\r\n  };\r\n\r\n  let handleTagSelectedChange = (event, newInputValue) => {\r\n    addTagInputSelectedToLocalState(newInputValue);\r\n  };\r\n\r\n  function handleDelete(e, index) {\r\n    let strToRemove = globalRef.current[index].current.children[0].textContent;\r\n    deleteTagFromState(strToRemove);\r\n  }\r\n\r\n  async function submitPost(e) {\r\n    e.preventDefault();\r\n    const info = {\r\n      postContent: postText,\r\n      postTitle: titleText,\r\n      tags: tagsArray,\r\n      user: userId,\r\n    };\r\n\r\n    try {\r\n      await submitPostMutation({ variables: { newPost: info } });\r\n      submitSuccessfulDispatch();\r\n    } catch (e) {\r\n      alert(\"There was an error\");\r\n    }\r\n  }\r\n\r\n  if (submitSuccessful) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <CssBaseLine />\r\n      <form className={classes.formContainer}>\r\n        <h2 className={classes.title}>Post Title</h2>\r\n        <TextField\r\n          className={classes.inputPost}\r\n          onChange={handleChange}\r\n          value={titleText}\r\n          id={\"post-title\"}\r\n        />\r\n        <h2 className={classes.title}>Content</h2>\r\n        <TextField\r\n          className={classes.inputPost}\r\n          id={\"post-body\"}\r\n          label={\"Add Post Here....\"}\r\n          multiline={true}\r\n          rows={10}\r\n          rowsMax={30}\r\n          onChange={handleChange}\r\n          value={postText}\r\n        />\r\n        <div\r\n          className={classes.wordCount}\r\n        >{`${currentPostWordCount} Characters`}</div>\r\n        <h3 className={classes.title}>Tags</h3>\r\n        <Autocomplete\r\n          id=\"tags\"\r\n          value={tagInputValue}\r\n          onChange={handleTagChange}\r\n          inputValue={tagInputValueSelected}\r\n          onInputChange={handleTagSelectedChange}\r\n          options={programmingLanguages}\r\n          className={\"tags\"}\r\n          getOptionLabel={(option) => option.title}\r\n          style={{ width: 300 }}\r\n          renderInput={(params) => (\r\n            <TextField {...params} label=\"Tags\" variant=\"outlined\" />\r\n          )}\r\n        />\r\n        <div className={classes.chipContainer}>\r\n          <>\r\n            {tagsArray.map((item, i) => {\r\n              return (\r\n                <Chip\r\n                  className={classes.chip}\r\n                  index={i}\r\n                  label={item}\r\n                  color={\"secondary\"}\r\n                  ref={globalRef.current[i]}\r\n                  onDelete={(e) => handleDelete(e, i)}\r\n                />\r\n              );\r\n            })}\r\n          </>\r\n        </div>\r\n\r\n        <Button\r\n          className={classes.button}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={submitPost}\r\n        >\r\n          Add Post\r\n        </Button>\r\n      </form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  postText: state.postText,\r\n  currentPostWordCount: state.currentPostWordCount,\r\n  titleText: state.titleText,\r\n  tagInputValue: state.tagInputValue,\r\n  tagsArray: state.tagsArray,\r\n  tagInputValueSelected: state.tagInputValueSelected,\r\n  submitSuccessful: state.submitSuccessful,\r\n  userId: state.userId,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addPostToLocalState: (payload) => dispatch(ADD_POST_TO_STATE(payload)),\r\n  addTitleToLocalState: (payload) => dispatch(ADD_TITLE_TO_STATE(payload)),\r\n  addTagsToLocalState: (payload) => dispatch(ADD_TAGS_TO_STATE(payload)),\r\n  addTagInputToLocalState: (payload) =>\r\n    dispatch(ADD_TAG_INPUT_TO_STATE(payload)),\r\n  addTagInputSelectedToLocalState: (payload) =>\r\n    dispatch(ADD_TAG_INPUT_SELECTED_TO_STATE(payload)),\r\n  deleteTagFromState: (payload) => dispatch(REMOVE_TAG_FROM_TAG_ARRAY(payload)),\r\n  getPostFromLocalState: () => dispatch(GET_POST_FROM_LOCAL_STATE()),\r\n  submitSuccessfulDispatch: () => dispatch(SUBMIT_SUCCESSFUL()),\r\n  resetPostState: () => dispatch({ type: \"RESET_POST_STATE\" }),\r\n});\r\n\r\nconst programmingLanguages = [\r\n  { title: \"Python\" },\r\n  { title: \"Javascript\" },\r\n  { title: \"Java\" },\r\n  { title: \"HTML\" },\r\n  { title: \"CSS\" },\r\n  { title: \"C++\" },\r\n];\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddPost);\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport gql from 'graphql-tag'\r\nimport {connect} from 'react-redux'\r\nimport {useMutation, useQuery} from \"@apollo/react-hooks\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from '@material-ui/core/Button'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\n\r\nconst {useRef} = require(\"react\");\r\n\r\n\r\nconst {useState} = require(\"react\");\r\n\r\nconst {useEffect} = require(\"react\");\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n    container: {\r\n        width: '80%',\r\n        margin: 'auto',\r\n        marginTop: '20px'\r\n    }\r\n});\r\n\r\nfunction createData(PostTitle, postDate, views) {\r\n    return { PostTitle, postDate, views};\r\n}\r\n\r\n\r\nconst getAllPostsQuery = gql`\r\n    query getAllPosts($userId: String){\r\n        posts(userId: $userId){\r\n            views\r\n            _id\r\n            postTitle\r\n            postDate\r\n            likes\r\n       \r\n        }\r\n    }\r\n    \r\n`\r\n\r\nconst deletePostQuery = gql`\r\n    mutation deletePost($postId: String) {\r\n        deletePost(postId: $postId)\r\n\r\n    }\r\n`\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst AllPosts = ({props, userId}) => {\r\n\r\n    const {data, error, loading} = useQuery(getAllPostsQuery, {onCompleted:()=>console.log('went for data') ,pollInterval:500,variables:{userId: userId},fetchPolicy:\"no-cache\"})\r\n    const okRef = useRef('ok')\r\n    const cancelRef = useRef('cancel')\r\n    const rowRef = useRef([])\r\n\r\n\r\n\r\n    if(data){\r\n        if(rowRef.current.length !== data.posts.length){\r\n        rowRef.current = Array(data.posts.length).fill().map((_, i) =>{\r\n            return rowRef.current[i] || React.createRef()\r\n        })\r\n        }\r\n    }\r\n\r\n    const [open, setOpen] = useState(false)\r\n    const [postIdentifiedToBeDeleted, setPostIdentifier] = useState(null)\r\n    const [redirect ,setRedirect] = useState(false)\r\n    const [postToEdit, setPostToEdit] = useState(null)\r\n\r\n    const [deletePostMutation, _] = useMutation(deletePostQuery,{})\r\n\r\n    const handleClickOpen = (i) => {\r\n        setOpen(true);\r\n        setPostIdentifier(i)\r\n\r\n    };\r\n\r\n    const handleEditPostClick = (i) => {\r\n        console.log('clicked')\r\n        setPostIdentifier(i)\r\n        let post = data.posts[i]\r\n        setPostToEdit(post._id)\r\n        setRedirect(true)\r\n\r\n    }\r\n\r\n\r\n    const deletePost =  async (postId) => {\r\n\r\n        let {data, error, loading} = await deletePostMutation({variables:{postId}})\r\n        if(error) {throw error}\r\n        if(loading){console.log('loading....')}\r\n\r\n        return data\r\n    }\r\n\r\n    const handleCloseOnOk = async (e, i) => {\r\n\r\n        const postId = rowRef.current[postIdentifiedToBeDeleted]\r\n\r\n        // console.log(data.posts[postIdentifiedToBeDeleted])\r\n        await deletePost(data.posts[postIdentifiedToBeDeleted]._id)\r\n        setPostIdentifier(null)\r\n\r\n\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleCloseOnCancel = (e) => {\r\n        setOpen(false);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    const classes = useStyles()\r\n\r\n    if(loading) {\r\n        return <CircularProgress/>\r\n    }\r\n\r\n    if(error) {\r\n        return <div>{`${error} There has beena an error, please refresh the page.`}</div>\r\n    }\r\n\r\n    if(redirect) {\r\n        return <Redirect to={`/edit_post/${postToEdit}`}></Redirect>\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <TableContainer component={Paper} className={classes.container}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell align=\"center\">Post Title</TableCell>\r\n                        <TableCell align=\"center\">Post Date</TableCell>\r\n                        <TableCell align=\"center\">Likes</TableCell>\r\n                        <TableCell align=\"center\">Edit</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.posts.map((row,i) => {\r\n\r\n                            return (\r\n                        <TableRow ref={rowRef.current[i]} postId={row._id}>\r\n                            <TableCell align=\"center\" >{row.postTitle}</TableCell>\r\n                            <TableCell align=\"center\">{row.postDate}</TableCell>\r\n                            <TableCell align=\"center\">{row.likes}</TableCell>\r\n                            <TableCell align=\"center\">\r\n                            <DeleteIcon onClick={()=> handleClickOpen(i)} />\r\n                            <EditIcon onClick={() => handleEditPostClick(i) }/>\r\n                            </TableCell>\r\n                        </TableRow>)\r\n                    })}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n\r\n\r\n        {/*Modal*/}\r\n        <Dialog open={open} onClose={handleCloseOnCancel}>\r\n        <DialogTitle>Are you Sure? </DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>Are you sure you want to delete this post - deleted posts cannot be recovered.</DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button ref={okRef} onClick={handleCloseOnOk}>Ok</Button>\r\n            <Button ref={cancelRef} onClick={handleCloseOnCancel}>Cancel</Button>\r\n        </DialogActions>\r\n        </Dialog>\r\n        </>\r\n\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => ({\r\n    userId: state.userId\r\n})\r\n\r\nexport default connect(mapStateToProps, null)(AllPosts);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { Query } from \"@apollo/react-components\";\r\nimport gql from \"graphql-tag\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  container: {\r\n    width: \"80%\",\r\n    margin: \"auto\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  paragraph: {\r\n    textAlign: \"center\",\r\n    marginBottom: \"10px\",\r\n    marginTop: \"20px\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    marginBottom: \"10px\",\r\n    marginTop: \"20px\",\r\n    fontSize: \"2rem\",\r\n  },\r\n  headerImage: {\r\n    width: \"800px\",\r\n    height: \"250px\",\r\n    backgroundColor: \"gray\",\r\n    marginTop: \"20px\",\r\n  },\r\n}));\r\n\r\nconst getSpecificPostQuery = gql`\r\n  query getSpecific($postId: String) {\r\n    getSpecificPost(postId: $postId) {\r\n      postTitle\r\n      postContent\r\n      tags\r\n    }\r\n  }\r\n`;\r\n\r\nconst ReadPost = ({}) => {\r\n  const classes = useStyles();\r\n  let { id } = useParams();\r\n\r\n  return (\r\n    <Container className={classes.container}>\r\n      <Query query={getSpecificPostQuery} variables={{ postId: id }}>\r\n        {({ data, loading, error }) => {\r\n          if (loading) return <CircularProgress />;\r\n          if (error) return `Something Went Wrong. ${error}`;\r\n\r\n          return (\r\n            <Box className={classes.container}>\r\n              <Box>\r\n                <Typography className={classes.title}>\r\n                  {data.getSpecificPost.postTitle}\r\n                </Typography>\r\n              </Box>\r\n              <Box>\r\n                <Typography className={classes.paragraph}>\r\n                  {data.getSpecificPost.postContent}\r\n                </Typography>\r\n              </Box>\r\n            </Box>\r\n          );\r\n        }}\r\n      </Query>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ReadPost);\r\n","/* eslint-disable */\r\nimport React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport gql from \"graphql-tag\";\r\nimport { useApolloClient, useMutation } from \"@apollo/react-hooks\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { SET_USER_ID_IN_STATE } from \"../../redux/actions\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst { useEffect } = require(\"react\");\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    marginTop: theme.spacing(1),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  warning: {\r\n    color: \"red\",\r\n  },\r\n}));\r\n\r\nconst CREATE_USER = gql`\r\n  mutation createUserAccount($user: createUser) {\r\n    createUserAccount(user: $user) {\r\n      email\r\n    }\r\n  }\r\n`;\r\n\r\nconst CreateAccount = ({\r\n  isLoggedIn,\r\n  loginWarning,\r\n  changeLoginWarningToFalse,\r\n  changeLoginWarningToTrue,\r\n  changeLoginStatusToTrue,\r\n  setUserIdInState,\r\n  changeCreateAccountWarningToTrue,\r\n  changeCreateAccountWarningToFalse,\r\n  createAccountWarning,\r\n  setAccountCreatedSuccess,\r\n  accountCreatedSuccess,\r\n}) => {\r\n  const classes = useStyles();\r\n  const client = useApolloClient();\r\n\r\n  const [createUser] = useMutation(CREATE_USER);\r\n  const [state, setState] = useState({ email: \"\", password: \"\" });\r\n  const [submitSuccess, setSubmitSuccess] = useState(false);\r\n  const [userAlreadyExists, setUserAlreadyExists] = useState(false);\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const msgTimer = () => {\r\n    setTimeout(function () {\r\n      changeCreateAccountWarningToFalse();\r\n    }, 4000);\r\n  };\r\n\r\n  const checkEmailValid = () => {\r\n    const email = state.email;\r\n    return /\\S+@\\S+\\.\\S+/.test(email);\r\n  };\r\n\r\n  const checkPasswordValid = () => {\r\n    const alpha = /^(?:[0-9]+[a-z]|[a-z]+[0-9])/i.test(state.password);\r\n    const len = /\\w{8,}/.test(state.password);\r\n\r\n    let res;\r\n\r\n    if (len && alpha) {\r\n      res = true;\r\n    } else {\r\n      res = false;\r\n    }\r\n\r\n    return res;\r\n  };\r\n\r\n  const createUserAccount = async (e, client) => {\r\n      e.preventDefault();\r\n    const emailValid = checkEmailValid();\r\n    const passwordValid = checkPasswordValid();\r\n    if (!emailValid || !passwordValid) {\r\n      changeCreateAccountWarningToTrue();\r\n      msgTimer();\r\n\r\n    } else {\r\n\r\n        const { data, error, loading } = await createUser({\r\n            variables: { user: { email: state.email, password: state.password } },\r\n        });\r\n\r\n        if (error) throw error;\r\n        if (loading) {\r\n            return <CircularProgress />;\r\n        }\r\n\r\n        if (data.createUserAccount.email === \"already exists\") {\r\n            console.log(data.createUserAccount);\r\n            setUserAlreadyExists(true);\r\n            setUserAlreadyExists(false);\r\n        } else if (data.createUserAccount.email === null) {\r\n            alert(\"Something went wrong. \");\r\n        } else {\r\n            // setSubmitSuccess(true)\r\n            setAccountCreatedSuccess();\r\n        }\r\n    }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n  const handleChange = (e) => {\r\n    setState({ ...state, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n\r\n  if (accountCreatedSuccess) {\r\n    return <Redirect to={\"/login\"} />;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container className={classes.root} maxWidth={\"xs\"}>\r\n        <CssBaseline />\r\n\r\n        {userAlreadyExists &&\r\n          enqueueSnackbar(\"User Already Exists!\", { variant: \"error\" })}\r\n        <div className={classes.paper}>\r\n          <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component={\"h1\"} variant={\"h5\"}>\r\n            Create Account\r\n          </Typography>\r\n\r\n          {createAccountWarning && (\r\n            <Box className={classes.warning}>\r\n              {\"Please enter a valid email address and/or password.\"}\r\n            </Box>\r\n          )}\r\n\r\n          <form className={classes.form} noValidate>\r\n            <TextField\r\n              variant={\"outlined\"}\r\n              margin={\"normal\"}\r\n              required\r\n              fullWidth\r\n              error={createAccountWarning}\r\n              helperText={\r\n                createAccountWarning\r\n                  ? \"Please Enter a valid email address.\"\r\n                  : \"\"\r\n              }\r\n              onChange={handleChange}\r\n              value={state.email}\r\n              id={\"email\"}\r\n              label={\"email address\"}\r\n              name={\"email\"}\r\n              autoComplete={\"email\"}\r\n              autoFocus\r\n            />\r\n\r\n            <TextField\r\n              variant={\"outlined\"}\r\n              margin={\"normal\"}\r\n              required\r\n              fullWidth\r\n              error={createAccountWarning}\r\n              helperText={\r\n                createAccountWarning\r\n                  ? \"Please make sure password is atleast 8 characters long, with a mixture of letters and numbers.\"\r\n                  : \"\"\r\n              }\r\n              onChange={handleChange}\r\n              value={state.password}\r\n              id={\"password\"}\r\n              label={\"password\"}\r\n              name={\"password\"}\r\n              type={\"password\"}\r\n              autoComplete={\"current-password\"}\r\n            />\r\n\r\n            <Button\r\n              type={\"submit\"}\r\n              fullWidth\r\n              variant={\"contained\"}\r\n              color={\"primary\"}\r\n              onClick={(e) => createUserAccount(e, client)}\r\n              className={classes.submit}\r\n            >\r\n              Create Account\r\n            </Button>\r\n            <Grid container>\r\n              <Grid item>\r\n                <Link href={\"/login\"} variant={\"body2\"}>\r\n                  {\"Already have an account? Log In\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </form>\r\n        </div>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLoggedIn: state.isLoggedIn,\r\n  loginWarning: state.loginWarning,\r\n  createAccountWarning: state.createAccountWarning,\r\n  userId: state.userId,\r\n  accountCreatedSuccess: state.accountCreatedSuccess,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  changeLoginWarningToFalse: () =>\r\n    dispatch({ type: \"CHANGE_LOGIN_WARNING_FALSE\" }),\r\n  changeLoginWarningToTrue: () =>\r\n    dispatch({ type: \"CHANGE_LOGIN_WARNING_TRUE\" }),\r\n  changeLoginStatusToTrue: () => dispatch({ type: \"CHANGE_LOGIN_STATUS_TRUE\" }),\r\n  getState: () => dispatch({ type: \"DEFAULT\" }),\r\n  setUserIdInState: (payload) => dispatch(SET_USER_ID_IN_STATE(payload)),\r\n  changeCreateAccountWarningToTrue: () =>\r\n    dispatch({ type: \"CHANGE_CREATE_ACCOUNT_WARNING_TO_TRUE\" }),\r\n  changeCreateAccountWarningToFalse: () =>\r\n    dispatch({ type: \"CHANGE_CREATE_ACCOUNT_WARNING_TO_FALSE\" }),\r\n  setAccountCreatedSuccess: () => dispatch({ type: \"ACCOUNT_CREATED\" }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CreateAccount);\r\n","/* eslint-disable */\r\nimport React from \"react\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport theme from \"./Theme/Theme\";\r\nimport Login from \"./pages/Login/Login\";\r\nimport Home from \"./pages/Home/Home\";\r\nimport Navbar from \"./pages/Nav/Nav\";\r\nimport EditPost from \"./pages/edit_post/EditPost\";\r\nimport \"typeface-roboto\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport ProtectedRoute from \"./pages/Login/ProtectedRoute\";\r\nimport addPost from \"./pages/add/addPost\";\r\nimport AllPosts from \"./pages/all_posts/AllPosts\";\r\nimport ReadPost from \"./pages/read/ReadPost\";\r\nimport CreateAccount from \"./pages/Login/CreateAccount\"\r\n\r\nfunction App({ isLoggedIn }) {\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Navbar />\r\n\r\n      <Switch>\r\n        <ProtectedRoute Component={Home} exact path={\"/\"} />\r\n        <ProtectedRoute Component={Home} exact path={\"/home\"} />\r\n        <ProtectedRoute Component={addPost} exact path={\"/add_post\"} />\r\n        <ProtectedRoute Component={AllPosts} exact path={\"/all_posts\"} />\r\n        <ProtectedRoute Component={EditPost} exact path={\"/edit_post/:id\"} />\r\n        <ProtectedRoute Component={ReadPost} exact path={\"/post/:id\"} />\r\n\r\n        <Route exact path={\"/login\"}>\r\n          <Login />\r\n        </Route>\r\n\r\n        <Route exact path={\"/create_account\"}>\r\n          <CreateAccount />\r\n        </Route>\r\n\r\n\r\n\r\n      </Switch>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLoggedIn: state.isLoggedIn,\r\n});\r\n\r\nconst mapDispatchToProps = () => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import gql from 'graphql-tag'\r\n\r\n\r\nexport const typeDefs = gql`\r\n    extend type Query {\r\n        state: String\r\n        isLoggedIn: Boolean\r\n        loginWarning: Boolean\r\n        anyState: String\r\n    }\r\n    \r\n    extend type Mutation {\r\n        loginWarning(bool:Boolean):Boolean\r\n        isLoggedInMutation:Boolean\r\n            \r\n    }\r\n`","import {GET_IS_LOGGEDIN} from './actions'\r\nimport {ADD_POST_TO_STATE} from './actions'\r\n\r\n\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    loginWarning: false\r\n}\r\n\r\n\r\n const rootReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n        case GET_IS_LOGGEDIN:\r\n            return {...state}\r\n        case 'CHANGE_LOGIN_WARNING_FALSE':\r\n            return {...state, loginWarning: false}\r\n        case 'CHANGE_LOGIN_WARNING_TRUE':\r\n            return {...state, loginWarning: true}\r\n        case 'CHANGE_LOGIN_STATUS_TRUE':\r\n            return {...state, isLoggedIn: true}\r\n        case 'ADD_TITLE_TO_STATE':\r\n            return {...state, titleText: action.payload}\r\n        case 'ADD_TAG_INPUT_TO_STATE':\r\n            return {...state, tagInputValue: action.payload}\r\n        case 'ADD_TAGS_TO_STATE':\r\n             return {...state, tagsArray: [...state.tagsArray, action.payload]}\r\n        case 'RESET_TAGS_STATE':\r\n            return {...state, tagsArray:[]}\r\n        case 'GET_POST_FROM_LOCAL_STATE':\r\n             return {...state}\r\n        case 'RESET_POST_STATE':\r\n            return {...state, titleText: '', postText: '', tagsArray: []}\r\n        case 'SET_POSTS':\r\n            return {...state, allPosts: [...state.allPosts, ...action.payload]}\r\n        case 'SET_USER_ID_IN_STATE':\r\n            return {...state, userId: action.payload}\r\n        case 'SET_SEARCH_STATE':\r\n            return {...state, searchInputState: action.payload}\r\n        case 'ADD_TAG_INPUT_SELECTED_TO_STATE':\r\n            return {...state, tagInputValueSelected: action.payload}\r\n        case 'SET_SEARCH_REGEX':\r\n            return {...state, searchRegex: action.payload}\r\n        case 'REMOVE_TAG_FROM_TAG_ARRAY':\r\n            return {...state, tagsArray: state.tagsArray.filter(item => item !== action.payload)}\r\n        case 'SUBMIT_SUCCESSFUL':\r\n            return {...state, submitSuccessful: true}\r\n        case 'RESET_SUBMIT':\r\n            return {...state, submitSuccessful: false}\r\n        case 'ADD_POST_TO_STATE':\r\n            return {...state, currentPostWordCount: action.payload.length, postText: action.payload }\r\n        case 'SET_POST_TO_READ':\r\n            return {...state, postToRead: action.payload}\r\n        case 'LOGOUT':\r\n                return {...state, isLoggedIn: false, userId:''}\r\n        case 'CHANGE_CREATE_ACCOUNT_WARNING_TO_TRUE':\r\n            return {...state, createAccountWarning: true}\r\n        case 'CHANGE_CREATE_ACCOUNT_WARNING_TO_FALSE':\r\n            return {...state, createAccountWarning: false}\r\n        case 'ACCOUNT_CREATED':\r\n            return {...state, accountCreatedSuccess: true}\r\n        case 'ACCOUNT_CREATED_SUCCESS_TO_FALSE':\r\n            return {...state, accountCreatedSuccess: false}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport default rootReducer;\r\n","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst middleware = [thunk]\r\n\r\nconst initState = {allPosts: [], isLoggedIn: false, accountCreatedSuccess: false,  userId:'', loginWarning: false, createAccountWarning: false, postText: '',\r\n    currentPostWordCount: 0, titleText: '', tagsArray: [], tagInputValue:'',tagInputValueSelected:'',\r\nsubmitSuccessful: false, searchInputState:'',searchRegex:'', postToRead:''}\r\n\r\nconst store = createStore(\r\n    rootReducer, initState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n\r\n\r\n)\r\n\r\nexport default store","import { ApolloClient } from \"apollo-client\";\r\nimport App from \"./App\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { typeDefs } from \"./apollo-client/client-schema\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport \"./assets/auto-complete.css\";\r\nimport { SnackbarProvider } from \"notistack\";\r\n\r\nconst { useState } = require(\"react\");\r\nconst { useEffect } = require(\"react\");\r\nconst { gql } = require(\"apollo-boost\");\r\nconst HttpLink = require(\"apollo-link-http\").HttpLink;\r\nconst inMemoryCache = require(\"apollo-cache-inmemory\").InMemoryCache;\r\n\r\nconst resolvers = {\r\n  Mutation: {\r\n    async loginWarning(parent, args, { cache }, info) {\r\n      cache.writeData({ data: { loginWarning: args.bool } });\r\n\r\n      return args.bool;\r\n    },\r\n\r\n    async isLoggedInMutation(parent, args, { cache }, info) {\r\n      const res = await cache.readQuery({\r\n        query: gql`\r\n          query isLoggedIn {\r\n            isLoggedIn @client\r\n          }\r\n        `,\r\n      });\r\n\r\n      let bool = res.isLoggedIn;\r\n      if (bool) {\r\n        bool = false;\r\n      } else {\r\n        bool = true;\r\n      }\r\n      console.log(`running mutation, changing to ${bool}`);\r\n      await cache.writeData({ data: { isLoggedIn: bool } });\r\n    },\r\n  },\r\n};\r\n\r\nconst init = async () => {\r\n  const ApolloApp = () => {\r\n    const [client, setClient] = useState(undefined);\r\n\r\n    useEffect(async () => {\r\n      const cache = new inMemoryCache();\r\n      const link = new HttpLink({\r\n        uri: \"http://localhost:4000\",\r\n      });\r\n\r\n      const client = new ApolloClient({\r\n        cache,\r\n        link,\r\n        typeDefs,\r\n        resolvers,\r\n      });\r\n\r\n      setClient(client);\r\n    }, []);\r\n\r\n    if (client === undefined) return <div>Loading...</div>;\r\n\r\n    return (\r\n      <Router basename={\"/\"}>\r\n        <Provider store={store}>\r\n          <ApolloProvider client={client}>\r\n            <SnackbarProvider maxSnack={3}>\r\n              <App />\r\n            </SnackbarProvider>\r\n          </ApolloProvider>\r\n        </Provider>\r\n      </Router>\r\n    );\r\n  };\r\n\r\n  ReactDOM.render(<ApolloApp />, document.getElementById(\"root\"));\r\n};\r\n\r\ninit();\r\n"],"sourceRoot":""}